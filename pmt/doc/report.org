#+OPTIONS: toc:nil title:nil
\begin{titlepage}
    \begin{center}
        \vspace{1cm}

	\textbf{Implementação de Algoritmos de Casamento de Padrão}

	\vspace {2cm}
	Gabriel Barbosa Gaspar Veloso

	\vfill

	CIn - UFPE Av. Jorn. Aníbal Fernandes, s/n - Cidade Universitária,
	Recife - PE, 50740-560
    \end{center}
\end{tilepage}
\pagebreak

#+TOC: headlines 2

\pagebreak

* Equipe
Projeto feito por Gabriel Barbosa Gaspar Veloso.

* Implementação
** Algoritmos
Foram implementados os algoritmos de */Knuth-Morris-pratt/*,
*/Boyer-Moore/*, */Sellers/* e */Ukkonen/*. Quando não
explicitamente escolhidos, são usados os algoritmos
*/Boyer-Moore/* para o caso de não ter sido escolhida
distância de edição, e */Ukkonen/*, caso contrário.

Quando um algoritmo que suporta distância de edição é escolhido,
mas com distância não especificada, essa é considerada como
zero.

** Detalhes de implementação
	LISP foi inicialmente concebida com o propósito de processar
listas encadeadas, e daí vem seu nome (/List Processing/). Porém, muito
tempo se passou desde a implementação inicial de LISP, e hoje seu
dialeto mais comum, Common Lisp, utilizado nesse projeto, oferece
/arrays/ e /hash-tables/. Infelizmente, a presença dessas estruturas
não foi suficiente para gerar performance desejável para situações
em que algoritmos de casamento de padrão são usados. Creio que o
estilo de funções como /first-class citizens/ e tipos dinâmicos
tenha sido o principal fator para tornar os algoritmos implementados
cerca de dez vezes mais lentos que /grep/.

	Fato relevante também é que as linhas dos arquivos de /input/
eram lidas e então postas em /strings/, para só então ser realizado o
casamento de padrões. Esse é um exemplo de detalhe de implementação
potencialmente corrigível com mais atenção a detalhes durante a
produção. Com esforço suficiente, creio ser possível tornar o programa
gerado tão veloz quanto /grep/, já que compiladores de LISP são muito
bons em gerar código de máquina. Há um artigo
\footnote{VERNA, Didier. How to Make Lisp Go Faster than C. IAENG International Journal of Computer Science, v. 32, n. 4, p. 499-504, 2006.}
em que, através de sucessivas anotações e correções a código LISP simples,
atinge-se performance igual ou superior a um programa escrito
em C.

** Bugs
Com o /macro with-open-file/ é possível ler um arquivo e garantir que será
fechado em caso de erros. Esse /macro/ detecta o /encoding/ do arquivo a 
ser lido para evitar erros de leitura. O arquivo /sources.200MB/
disponibilizado no site de /Pizza & Chili/ mostra ter codificação *UTF-8*
quando verificado com o comando /file/ e, portanto, é lido como *UTF-8* pelo
programa. Acontece que, em dado caractere, o programa não consegue realizar
a decodificação utilizando *UTF-8*, mas consegue com *Latin-1*. Dessa forma,
para realizar os testes do programa, tive de explicitamente compilá-lo com
a opção :external-format :latin1 no /macro with-open-file/. Esse problema
não ocorreu em outras situações, de forma que o código enviado não terá
a mesma opção informada.

\pagebreak

* Testes
** Tempo de execução
Tempo de execução médio (100 execuções) para cada algoritmo
com o padrão /int/ para arquivo /sources.200MB/:

#+ATTR_LATEX: :caption \\\parbox{\footnotesize Testes realizados utilizando a ferramenta perf stat.}
| Algoritmo          | Tempo de execução (s) |
|--------------------+-----------------------|
| grep               | 3.0717 +- 0.0214      |
| Knuth-Morris-Pratt | 27.962 +- 0.1300      |
| Boyer-Moore        | 41.767 +- 0.1300      |
| Sellers            | 41.641 +- 0.4500      |
| Ukkonen            | 28.847 +- 0.2550      |

** Conclusões
Infelizmente, o tempo resultante está longe do desejado. Uso do
programa é recomendável somente para arquivos pequenos, caso em 
que funciona sem problemas. Tenho interesse, ainda assim, de 
tentar modificar o código através de um tempo mais extenso, para
atingir resultados melhores.
